%VALIDATE_TRIAD_SUMMARY  Compare MATLAB TRIAD metrics against Python reference
%   This script loads the Task 5 results for datasets X001..X003, computes
%   summary statistics and checks them against a hard-coded table of
%   reference values generated by the Python pipeline.

datasets = {'X001','X002','X003'};
metrics = {'RMSEpos','EndError','RMSresidPos','MaxresidPos','RMSresidVel',...
    'MaxresidVel','AccelBiasNorm','GyroBiasNorm','GravErrMean','GravErrMax',...
    'EarthRateMean','EarthRateMax','ZUPTcnt','Runtime'};

PythonRef = [
    0.28,0.01,0.02,0.29,0.01,0.15,6.92,0.00,NaN,NaN,NaN,NaN,479587,176.20;
    0.29,0.01,0.03,0.30,0.10,0.42,6.92,0.00,NaN,NaN,NaN,NaN,479587,177.53;
    0.29,0.01,0.03,0.30,0.10,0.42,6.92,0.00,NaN,NaN,NaN,NaN,479587,179.14];

MySummary = nan(numel(datasets), numel(metrics));

for k = 1:numel(datasets)
    ds = datasets{k};
    tag = sprintf('IMU_%s_GNSS_%s_TRIAD', ds, ds);
    resFile = fullfile('results', [tag '_task5_results.mat']);
    t2File  = fullfile('results', ['Task2_body_' tag '.mat']);
    if ~isfile(resFile)
        error('Missing result file: %s', resFile);
    end
    S = load(resFile);
    pos_log = S.x_log(1:3,:)';
    vel_log = S.x_log(4:6,:)';
    gnss_pos = S.gnss_pos_ned;
    gnss_vel = S.gnss_vel_ned;
    if isfield(S,'imu_time')
        imu_time = S.imu_time;
    else
        imu_time = 0:size(pos_log,1)-1;
    end
    if isfield(S,'gnss_time')
        gnss_time = S.gnss_time;
    else
        gnss_time = linspace(imu_time(1), imu_time(end), size(gnss_pos,1));
    end
    pos_filt = interp1(imu_time, pos_log, gnss_time, 'linear','extrap');
    vel_filt = interp1(imu_time, vel_log, gnss_time, 'linear','extrap');
    res_pos = pos_filt - gnss_pos;
    res_vel = vel_filt - gnss_vel;
    RMSEpos     = sqrt(mean(sum(res_pos.^2,2)));
    EndError    = norm(pos_filt(end,:) - gnss_pos(end,:));
    RMSresidPos = sqrt(mean(res_pos.^2,'all'));
    MaxresidPos = max(vecnorm(res_pos,2,2));
    RMSresidVel = sqrt(mean(res_vel.^2,'all'));
    MaxresidVel = max(vecnorm(res_vel,2,2));
    zuptcnt     = sum(S.zupt_log);
    runtime     = NaN; if isfield(S,'runtime'), runtime = S.runtime; end

    acc_bias_norm  = NaN; gyro_bias_norm = NaN;
    if isfile(t2File)
        T2 = load(t2File);
        if isfield(T2,'accel_bias')
            acc_bias_norm = norm(T2.accel_bias);
        elseif isfield(T2,'acc_bias')
            acc_bias_norm = norm(T2.acc_bias);
        end
        if isfield(T2,'gyro_bias'), gyro_bias_norm = norm(T2.gyro_bias); end
    end

    MySummary(k,:) = [RMSEpos,EndError,RMSresidPos,MaxresidPos,RMSresidVel,MaxresidVel,
        acc_bias_norm,gyro_bias_norm,NaN,NaN,NaN,NaN,zuptcnt,runtime];
end

tol = 1e-2;
for i = 1:numel(datasets)
    for j = 1:numel(metrics)
        a = MySummary(i,j); b = PythonRef(i,j);
        if isnan(a) && isnan(b)
            continue
        end
        if abs(a - b) > tol
            error('%s %s mismatch: got %g, want %g', datasets{i}, metrics{j}, a, b);
        end
    end
end

fprintf('All TRIAD metrics match Python reference within tolerance.\n');
SummaryTable = array2table(MySummary, 'VariableNames', metrics, 'RowNames', datasets);
disp(SummaryTable);
