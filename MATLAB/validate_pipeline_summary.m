%VALIDATE_PIPELINE_SUMMARY Validate MATLAB pipeline results against Python reference
%   Computes summary metrics for multiple datasets and methods and compares them
%   against hard-coded reference values generated by the Python implementation.
%   Also runs a 3-sigma consistency check for each filter output.

% Configuration ---------------------------------------------------------------
datasets = {'X001','X002','X003'};
methods  = {'TRIAD','Davenport','SVD'};
metrics  = {'RMSEpos','EndError','RMSresidPos','MaxresidPos', ...
            'RMSresidVel','MaxresidVel','AccelBiasNorm','GyroBiasNorm', ...
            'GravErrMean','GravErrMax','EarthRateMean','EarthRateMax', ...
            'ZUPTcnt','Runtime','Pxx','Pyy','Pzz'};
tol = 1e-2;

% Python reference summary values
PythonRef = nan(numel(datasets), numel(metrics), numel(methods));
% PythonRef(:,:,1) corresponds to TRIAD:
PythonRef(:,:,1) = [ ...
  0.28,0.01,0.02,0.29,0.01,0.15,6.92,0.00,NaN,NaN,NaN,NaN,479587,176.20, NaN,NaN,NaN;  % X001
  0.29,0.01,0.03,0.30,0.10,0.42,6.92,0.00,NaN,NaN,NaN,NaN,479587,177.53, NaN,NaN,NaN;  % X002
  0.29,0.01,0.03,0.30,0.10,0.42,6.92,0.00,NaN,NaN,NaN,NaN,479587,179.14, NaN,NaN,NaN]; % X003
% The Davenport and SVD references mirror the TRIAD results in this repository.
PythonRef(:,:,2) = PythonRef(:,:,1); % Davenport
PythonRef(:,:,3) = PythonRef(:,:,1); % SVD

% Load true state ------------------------------------------------------------
truth = load('STATE_X001.txt');  % columns: ECEF-pos, ECEF-vel, quaternion

% Loop over methods and datasets -------------------------------------------
MySummary = nan(numel(datasets), numel(metrics), numel(methods));
for mi = 1:numel(methods)
    method = methods{mi};
    for di = 1:numel(datasets)
        ds = datasets{di};
        fname = sprintf('MATLAB/results/IMU_%s_GNSS_%s_%s_task5_results.mat', ds, ds, method);
        if ~isfile(fname)
            error('Missing result file: %s', fname);
        end
        S = load(fname);
        % Convert stored logs to NED pos/vel and compute errors vs truth
        pos_est = S.pos_ned;
        vel_est = S.vel_ned;
        % Columns of STATE_X001.txt: count, time, X, Y, Z, VX, VY, VZ, q0, q1, q2, q3
        % The true position and velocity are stored in columns 3:5 and 6:8
        % respectively. Extract these to compare against the estimated
        % NED position and velocity.
        tpos    = truth(:,3:5);
        tvel    = truth(:,6:8);
        err_pos = pos_est - tpos;
        err_vel = vel_est - tvel;
        % RMSE and end error
        RMSEpos  = sqrt(mean(sum(err_pos.^2,2)));
        EndError = norm(err_pos(end,:));
        % Residual stats
        residPosRMS = sqrt(mean(err_pos.^2));
        RMSresidPos = norm(residPosRMS);
        MaxresidPos = max(sqrt(sum(err_pos.^2,2)));
        residVelRMS = sqrt(mean(err_vel.^2));
        RMSresidVel = norm(residVelRMS);
        MaxresidVel = max(sqrt(sum(err_vel.^2,2)));
        % Bias norms
        AccelBiasNorm = norm(S.accel_bias);
        GyroBiasNorm  = norm(S.gyro_bias);
        % Attitude errors
        GravErrMean   = mean(abs(S.grav_err));
        GravErrMax    = max(abs(S.grav_err));
        EarthRateMean = mean(abs(S.erate_err));
        EarthRateMax  = max(abs(S.erate_err));
        % ZUPT count
        ZUPTcnt = sum(S.zupt_log);
        % Covariance diagonal
        Pxx = S.P(end,1,1);
        Pyy = S.P(end,2,2);
        Pzz = S.P(end,3,3);
        % Runtime if present
        if isfield(S,'runtime'), Runtime = S.runtime; else Runtime = NaN; end
        % Store metrics
        MySummary(di,:,mi) = [RMSEpos,EndError,RMSresidPos,MaxresidPos, ...
            RMSresidVel,MaxresidVel,AccelBiasNorm,GyroBiasNorm, ...
            GravErrMean,GravErrMax,EarthRateMean,EarthRateMax, ...
            ZUPTcnt,Runtime,Pxx,Pyy,Pzz];
    end
end

% 3-Sigma Validation --------------------------------------------------------
for mi = 1:numel(methods)
    method = methods{mi};
    for di = 1:numel(datasets)
        ds = datasets{di};
        validate_3sigma( ...
            sprintf('MATLAB/results/IMU_%s_GNSS_%s_%s_kf_output.mat', ds, ds, method), ...
            'STATE_X001.txt');
    end
end

% Comparison with Python reference -----------------------------------------
for mi = 1:numel(methods)
    for di = 1:numel(datasets)
        for mj = 1:numel(metrics)
            a = MySummary(di,mj,mi);
            b = PythonRef(di,mj,mi);
            if ~isnan(a) && ~isnan(b) && abs(a - b) > tol
                error('Mismatch %s-%s %s: got %g, expected %g', ...
                    datasets{di}, methods{mi}, metrics{mj}, a, b);
            end
        end
    end
end

fprintf('All %dx%d summaries and 3-sigma checks passed within tol=%g.\n', ...
    numel(datasets), numel(methods), tol);

rowNames = compose("%s_%s", repmat(datasets,1,numel(methods)), ...
    reshape(string(repmat(methods,1,numel(datasets))),[],1));
SummaryTable = array2table(reshape(MySummary,[],numel(metrics)), ...
    'VariableNames', metrics, 'RowNames', rowNames);
disp(SummaryTable);
